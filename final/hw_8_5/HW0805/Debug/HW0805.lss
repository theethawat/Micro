
HW0805.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000348  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1f  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000709  00000000  00000000  00000e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b0  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000019e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c0  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  88:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <switch_red_on>:
    }
}

// Switch Control, Switch using Active Low
void switch_red_on(){
	PORTD &= 0b11011111; //PD5 Low
  90:	5d 98       	cbi	0x0b, 5	; 11
  92:	08 95       	ret

00000094 <switch_green_on>:
}

void switch_green_on(){
	PORTD &= 0b11101111;//PD4 Low
  94:	5c 98       	cbi	0x0b, 4	; 11
  96:	08 95       	ret

00000098 <switch_red_off>:
}

void switch_red_off(){
	PORTD |= 0b00100000; //Only PD5 Must High 
  98:	5d 9a       	sbi	0x0b, 5	; 11
  9a:	08 95       	ret

0000009c <switch_green_off>:
}

void switch_green_off(){
	PORTD |= 0b00010000; //Only PD4 Must Low
  9c:	5c 9a       	sbi	0x0b, 4	; 11
  9e:	08 95       	ret

000000a0 <main>:

int main(void)
{
	// Port and Pin Direction Setting
	//PORT D and PORT B will be output
	DDRB = 0b00001111; // 0x0F
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11110111; //0xFF but INT1 is located on PD3, it must be input 
  a4:	87 ef       	ldi	r24, 0xF7	; 247
  a6:	8a b9       	out	0x0a, r24	; 10
	
	//PORT C will be input
	DDRC = 0b11111000;
  a8:	88 ef       	ldi	r24, 0xF8	; 248
  aa:	87 b9       	out	0x07, r24	; 7
	
	//Interrupt Flag Setting EIMSK,EICRA
	// bit 1 must be 1 (active)
	EIMSK = 0x02;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	8d bb       	out	0x1d, r24	; 29
	
	//falling edge and logic low interrupt
	EICRA = 0b0100; 
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	
	//Interrupt Setting
	sei();
  b6:	78 94       	sei
	
	// Initial Setting
	// Input will hold all port high because we want interrupt on low
	PORTC = 0x07; //0b111
  b8:	87 e0       	ldi	r24, 0x07	; 7
  ba:	88 b9       	out	0x08, r24	; 8
	
	// Output reset with all low because we want low to toggle interrupt 
    PORTB = 0x00;
  bc:	15 b8       	out	0x05, r1	; 5
	
	// Hold high logic in Interrupt port INT0
	PORTD |= (1<<3);
  be:	5b 9a       	sbi	0x0b, 3	; 11
	switch_green_off();
  c0:	0e 94 4e 00 	call	0x9c	; 0x9c <switch_green_off>
	switch_red_off();
  c4:	0e 94 4c 00 	call	0x98	; 0x98 <switch_red_off>
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x28>

000000ca <blink_red>:
	PORTD |= 0b00010000; //Only PD4 Must Low
}

// Blink Setting
void blink_red(){
	switch_red_on();
  ca:	0e 94 48 00 	call	0x90	; 0x90 <switch_red_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <blink_red+0xa>
  dc:	00 c0       	rjmp	.+0      	; 0xde <blink_red+0x14>
  de:	00 00       	nop
	_delay_ms(500);
	switch_red_off();
  e0:	0e 94 4c 00 	call	0x98	; 0x98 <switch_red_off>
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <blink_red+0x20>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <blink_red+0x2a>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <blink_green>:
	_delay_ms(500);
}

void blink_green(){
	switch_green_on();
  f8:	0e 94 4a 00 	call	0x94	; 0x94 <switch_green_on>
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	89 e6       	ldi	r24, 0x69	; 105
 100:	98 e1       	ldi	r25, 0x18	; 24
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <blink_green+0xa>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <blink_green+0x14>
 10c:	00 00       	nop
	_delay_ms(500);
	switch_green_off();
 10e:	0e 94 4e 00 	call	0x9c	; 0x9c <switch_green_off>
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	89 e6       	ldi	r24, 0x69	; 105
 116:	98 e1       	ldi	r25, 0x18	; 24
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <blink_green+0x20>
 120:	00 c0       	rjmp	.+0      	; 0x122 <blink_green+0x2a>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <__vector_2>:
	_delay_ms(500);
}

//Interrupt Service Routine of INT1
ISR(INT1_vect){
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	2f 93       	push	r18
 138:	3f 93       	push	r19
 13a:	4f 93       	push	r20
 13c:	5f 93       	push	r21
 13e:	6f 93       	push	r22
 140:	7f 93       	push	r23
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	
	// Initial press_key with -1 represent to key pressed
	press_key = -1; 
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	// Initial row to 1 represent start search with row 1
	row = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <row>
			}
		}
		
		else if(row ==4){
			// Check For Row 0, PB 0 Must be 0
			PORTB = 0b11111110; 
 15e:	4e ef       	ldi	r20, 0xFE	; 254
				case 0b011:
				press_key = 11; break;
				case 0b101:
				press_key = 0; break;
				case 0b110:
				press_key = 10; break;
 160:	0a e0       	ldi	r16, 0x0A	; 10
			_delay_ms(10); // bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
				press_key = 11; break;
 162:	1b e0       	ldi	r17, 0x0B	; 11
			}
		}
		
		else if(row ==3){
		// Check For Row 3, PB 1 Must be 0
		PORTB = 0b11111101;
 164:	3d ef       	ldi	r19, 0xFD	; 253
		// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
					press_key = 9; break;
				case 0b101:
					press_key = 8; break;
 166:	d8 e0       	ldi	r29, 0x08	; 8
				case 0b110:
					press_key = 7; break;
 168:	c7 e0       	ldi	r28, 0x07	; 7
		_delay_ms(10); // bounce check
		
		// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
					press_key = 9; break;
 16a:	b9 e0       	ldi	r27, 0x09	; 9
			}
		}
		
		else if(row ==2){
			// Check For Row 2, PB 2 Must be 0
			PORTB = 0b11111011;
 16c:	2b ef       	ldi	r18, 0xFB	; 251
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
					press_key = 6; break;
				case 0b101:
					press_key = 5; break;
 16e:	a5 e0       	ldi	r26, 0x05	; 5
				case 0b110:
					press_key = 4; break;
 170:	f4 e0       	ldi	r31, 0x04	; 4
			_delay_ms(10); // bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
					press_key = 6; break;
 172:	e6 e0       	ldi	r30, 0x06	; 6
	{
		//using port B output logic to find and Port C input logic to check
		if (row == 1)
		{
			// Check For Row 1,PB3 must be 0 (We have 1,2,3 in row 1) 
			PORTB = 0b11110111;
 174:	0f 2e       	mov	r0, r31
 176:	f7 ef       	ldi	r31, 0xF7	; 247
 178:	ff 2e       	mov	r15, r31
 17a:	f0 2d       	mov	r31, r0
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
					press_key = 3; break;
				case 0b101:
					press_key = 2; break;
 17c:	72 e0       	ldi	r23, 0x02	; 2
				case 0b110:
					press_key = 1; break;
 17e:	61 e0       	ldi	r22, 0x01	; 1
			_delay_ms(10); //bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
					press_key = 3; break;
 180:	53 e0       	ldi	r21, 0x03	; 3
	row = 1;
	
	do 
	{
		//using port B output logic to find and Port C input logic to check
		if (row == 1)
 182:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <row>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	c9 f4       	brne	.+50     	; 0x1bc <__vector_2+0x96>
		{
			// Check For Row 1,PB3 must be 0 (We have 1,2,3 in row 1) 
			PORTB = 0b11110111;
 18a:	f5 b8       	out	0x05, r15	; 5
 18c:	8f e3       	ldi	r24, 0x3F	; 63
 18e:	9c e9       	ldi	r25, 0x9C	; 156
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <__vector_2+0x6a>
 194:	00 c0       	rjmp	.+0      	; 0x196 <__vector_2+0x70>
 196:	00 00       	nop
			_delay_ms(10); //bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
 198:	86 b1       	in	r24, 0x06	; 6
 19a:	87 70       	andi	r24, 0x07	; 7
 19c:	85 30       	cpi	r24, 0x05	; 5
 19e:	41 f0       	breq	.+16     	; 0x1b0 <__vector_2+0x8a>
 1a0:	86 30       	cpi	r24, 0x06	; 6
 1a2:	49 f0       	breq	.+18     	; 0x1b6 <__vector_2+0x90>
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	09 f0       	breq	.+2      	; 0x1aa <__vector_2+0x84>
 1a8:	56 c0       	rjmp	.+172    	; 0x256 <__vector_2+0x130>
				case 0b011:
					press_key = 3; break;
 1aa:	50 93 00 01 	sts	0x0100, r21	; 0x800100 <_edata>
 1ae:	53 c0       	rjmp	.+166    	; 0x256 <__vector_2+0x130>
				case 0b101:
					press_key = 2; break;
 1b0:	70 93 00 01 	sts	0x0100, r23	; 0x800100 <_edata>
 1b4:	50 c0       	rjmp	.+160    	; 0x256 <__vector_2+0x130>
				case 0b110:
					press_key = 1; break;
 1b6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 1ba:	4d c0       	rjmp	.+154    	; 0x256 <__vector_2+0x130>
			}
		}
		
		else if(row ==2){
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	c1 f4       	brne	.+48     	; 0x1f0 <__vector_2+0xca>
			// Check For Row 2, PB 2 Must be 0
			PORTB = 0b11111011;
 1c0:	25 b9       	out	0x05, r18	; 5
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	9c e9       	ldi	r25, 0x9C	; 156
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <__vector_2+0xa0>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <__vector_2+0xa6>
 1cc:	00 00       	nop
			_delay_ms(10); // bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
 1ce:	86 b1       	in	r24, 0x06	; 6
 1d0:	87 70       	andi	r24, 0x07	; 7
 1d2:	85 30       	cpi	r24, 0x05	; 5
 1d4:	39 f0       	breq	.+14     	; 0x1e4 <__vector_2+0xbe>
 1d6:	86 30       	cpi	r24, 0x06	; 6
 1d8:	41 f0       	breq	.+16     	; 0x1ea <__vector_2+0xc4>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	e1 f5       	brne	.+120    	; 0x256 <__vector_2+0x130>
				case 0b011:
					press_key = 6; break;
 1de:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <_edata>
 1e2:	39 c0       	rjmp	.+114    	; 0x256 <__vector_2+0x130>
				case 0b101:
					press_key = 5; break;
 1e4:	a0 93 00 01 	sts	0x0100, r26	; 0x800100 <_edata>
 1e8:	36 c0       	rjmp	.+108    	; 0x256 <__vector_2+0x130>
				case 0b110:
					press_key = 4; break;
 1ea:	f0 93 00 01 	sts	0x0100, r31	; 0x800100 <_edata>
 1ee:	33 c0       	rjmp	.+102    	; 0x256 <__vector_2+0x130>
			}
		}
		
		else if(row ==3){
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	c1 f4       	brne	.+48     	; 0x224 <__vector_2+0xfe>
		// Check For Row 3, PB 1 Must be 0
		PORTB = 0b11111101;
 1f4:	35 b9       	out	0x05, r19	; 5
 1f6:	8f e3       	ldi	r24, 0x3F	; 63
 1f8:	9c e9       	ldi	r25, 0x9C	; 156
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <__vector_2+0xd4>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <__vector_2+0xda>
 200:	00 00       	nop
		_delay_ms(10); // bounce check
		
		// Read Value from PINC
			switch(PINC & 0x07){
 202:	86 b1       	in	r24, 0x06	; 6
 204:	87 70       	andi	r24, 0x07	; 7
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	39 f0       	breq	.+14     	; 0x218 <__vector_2+0xf2>
 20a:	86 30       	cpi	r24, 0x06	; 6
 20c:	41 f0       	breq	.+16     	; 0x21e <__vector_2+0xf8>
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	11 f5       	brne	.+68     	; 0x256 <__vector_2+0x130>
				case 0b011:
					press_key = 9; break;
 212:	b0 93 00 01 	sts	0x0100, r27	; 0x800100 <_edata>
 216:	1f c0       	rjmp	.+62     	; 0x256 <__vector_2+0x130>
				case 0b101:
					press_key = 8; break;
 218:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <_edata>
 21c:	1c c0       	rjmp	.+56     	; 0x256 <__vector_2+0x130>
				case 0b110:
					press_key = 7; break;
 21e:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
 222:	19 c0       	rjmp	.+50     	; 0x256 <__vector_2+0x130>
			}
		}
		
		else if(row ==4){
 224:	84 30       	cpi	r24, 0x04	; 4
 226:	b9 f4       	brne	.+46     	; 0x256 <__vector_2+0x130>
			// Check For Row 0, PB 0 Must be 0
			PORTB = 0b11111110; 
 228:	45 b9       	out	0x05, r20	; 5
 22a:	8f e3       	ldi	r24, 0x3F	; 63
 22c:	9c e9       	ldi	r25, 0x9C	; 156
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <__vector_2+0x108>
 232:	00 c0       	rjmp	.+0      	; 0x234 <__vector_2+0x10e>
 234:	00 00       	nop
			_delay_ms(10); // bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
 236:	86 b1       	in	r24, 0x06	; 6
 238:	87 70       	andi	r24, 0x07	; 7
 23a:	85 30       	cpi	r24, 0x05	; 5
 23c:	39 f0       	breq	.+14     	; 0x24c <__vector_2+0x126>
 23e:	86 30       	cpi	r24, 0x06	; 6
 240:	41 f0       	breq	.+16     	; 0x252 <__vector_2+0x12c>
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	41 f4       	brne	.+16     	; 0x256 <__vector_2+0x130>
				case 0b011:
				press_key = 11; break;
 246:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <_edata>
 24a:	05 c0       	rjmp	.+10     	; 0x256 <__vector_2+0x130>
				case 0b101:
				press_key = 0; break;
 24c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 250:	02 c0       	rjmp	.+4      	; 0x256 <__vector_2+0x130>
				case 0b110:
				press_key = 10; break;
 252:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <_edata>
			}
		}
		
		row ++;
 256:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <row>
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <row>
	} while (row <= 4);
 260:	85 30       	cpi	r24, 0x05	; 5
 262:	0c f4       	brge	.+2      	; 0x266 <__vector_2+0x140>
 264:	8e cf       	rjmp	.-228    	; 0x182 <__vector_2+0x5c>
	
	if (press_key == 0)
 266:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 26a:	81 11       	cpse	r24, r1
 26c:	0b c0       	rjmp	.+22     	; 0x284 <__vector_2+0x15e>
	{
		for (int i=0;i<5;i++) // blink for 5 times
		{
			blink_red();
 26e:	0e 94 65 00 	call	0xca	; 0xca <blink_red>
 272:	0e 94 65 00 	call	0xca	; 0xca <blink_red>
 276:	0e 94 65 00 	call	0xca	; 0xca <blink_red>
 27a:	0e 94 65 00 	call	0xca	; 0xca <blink_red>
 27e:	0e 94 65 00 	call	0xca	; 0xca <blink_red>
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <__vector_2+0x17c>
		}
	}
	else if (press_key != -1) // other button but not no click 
	{
		for(int i=0;i<press_key;i++){
 284:	18 16       	cp	r1, r24
 286:	6c f4       	brge	.+26     	; 0x2a2 <__vector_2+0x17c>
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	d0 e0       	ldi	r29, 0x00	; 0
			blink_green();
 28c:	0e 94 7c 00 	call	0xf8	; 0xf8 <blink_green>
			blink_red();
		}
	}
	else if (press_key != -1) // other button but not no click 
	{
		for(int i=0;i<press_key;i++){
 290:	21 96       	adiw	r28, 0x01	; 1
 292:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 296:	08 2e       	mov	r0, r24
 298:	00 0c       	add	r0, r0
 29a:	99 0b       	sbc	r25, r25
 29c:	c8 17       	cp	r28, r24
 29e:	d9 07       	cpc	r29, r25
 2a0:	ac f3       	brlt	.-22     	; 0x28c <__vector_2+0x166>
			blink_green();
		}
	}
	PORTB = 0b0000; // for receive next interrupt
 2a2:	15 b8       	out	0x05, r1	; 5
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
