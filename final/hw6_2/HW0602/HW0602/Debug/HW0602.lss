
HW0602.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075f  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006aa  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012e  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <change_to_gray>:
}

unsigned char change_to_gray(unsigned char input){
	unsigned char depli_input,gray_code;
	depli_input = input>> 1;
	gray_code = input + depli_input;
  80:	98 2f       	mov	r25, r24
  82:	96 95       	lsr	r25
  84:	98 0f       	add	r25, r24
	gray_code &= 0b01111111;
  86:	9f 77       	andi	r25, 0x7F	; 127
	input &= 0b10000000;
	gray_code = gray_code + input;
	return gray_code;
  88:	80 78       	andi	r24, 0x80	; 128
}
  8a:	89 0f       	add	r24, r25
  8c:	08 95       	ret

0000008e <main>:
unsigned char change_to_gray(unsigned char input);

int main(void)
{
	//Port B,C0 as Input D as Output
    DDRB = 0x00;
  8e:	14 b8       	out	0x04, r1	; 4
	DDRC = 0xF0;
  90:	90 ef       	ldi	r25, 0xF0	; 240
  92:	97 b9       	out	0x07, r25	; 7
	DDRD = 0xFF;
  94:	9f ef       	ldi	r25, 0xFF	; 255
  96:	9a b9       	out	0x0a, r25	; 10
	return gray_code;
}

unsigned char read_dip_2(){
	unsigned char direc;
	direc = PINC;
  98:	96 b1       	in	r25, 0x06	; 6
	/* Replace with your application code */
    while (1) 
    {
		direc = read_dip_2();
		// if 0 change to gray if 1 output
		input = PINB;
  9a:	23 b1       	in	r18, 0x03	; 3
		if(direc ==0){
  9c:	39 2f       	mov	r19, r25
  9e:	31 70       	andi	r19, 0x01	; 1
  a0:	90 fd       	sbrc	r25, 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <main+0x1e>
			output = change_to_gray(input);
  a4:	82 2f       	mov	r24, r18
  a6:	0e 94 40 00 	call	0x80	; 0x80 <change_to_gray>
  aa:	03 c0       	rjmp	.+6      	; 0xb2 <main+0x24>
		}
		else if(direc ==1){
  ac:	31 30       	cpi	r19, 0x01	; 1
  ae:	09 f4       	brne	.+2      	; 0xb2 <main+0x24>
			output = input;
  b0:	82 2f       	mov	r24, r18
		}
		PORTD = output;
  b2:	8b b9       	out	0x0b, r24	; 11
	}
  b4:	f1 cf       	rjmp	.-30     	; 0x98 <main+0xa>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
